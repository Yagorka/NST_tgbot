
from aiogram import types, executor, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram import Dispatcher, types

from style_transfer_model import StyleModel

from upscale_image_model import UpscaleModel
import aiogram.utils.markdown as md

from io import BytesIO
from PIL import Image

from aiogram.dispatcher.filters import Text

import os
import gc
API_TOKEN = os.environ["TG_BOT_TOKEN"]

storage = MemoryStorage()
bot = Bot(API_TOKEN)
dp = Dispatcher(bot,
                storage=storage)

@dp.message_handler(state='*', commands='help')
async def help_handler(message: types.Message, state: FSMContext):

    await bot.send_message(
        message.chat.id,
        md.text(
            md.text('/start- –∑–∞–ø—É—Å–∫ –ë–æ—Ç–∞.'),
            md.text('/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.'),
            md.text('/cancel -  –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'),
            md.text('/transfer_style - –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∏–ª—å.'),
            md.text('/upscale_image - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.'),
            sep='\n'
        ),
        reply_markup=types.ReplyKeyboardRemove()
    )


async def on_startup(dp):
    print('bot start!!!')

def stylize(content_img, style_img):
    """
    –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    model = StyleModel()
    output = model.style_transfer(content_img, style_img)
    del model
    gc.collect()
    return output

def upscale(img_for_upresolution):
    """
    –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    model = UpscaleModel()
    output = model.upscale_image(img_for_upresolution)
    del model
    gc.collect()
    return output

def pil_to_bytes(img):
    bio = BytesIO()
    bio.name = f'1_output.jpg'
    img.save(bio, 'JPEG')
    bio.seek(0)
    return bio


class ProfileStatesGroup(StatesGroup):

    photo_content = State()
    photo_style = State()

class Imagesforupscale(StatesGroup):

    photo_content = State()

def get_kb_start() -> ReplyKeyboardMarkup:
    kb = [
        [
            types.KeyboardButton(text="/UpscaleImage"),
            types.KeyboardButton(text="/StyleTransfer")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="Choice function..."
    )
    return keyboard

def get_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/create'))

    return kb

def get_cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/clean'))

    return kb


@dp.message_handler(commands=['clean'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply('–í—ã —É–¥–∞–ª–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                        reply_markup=get_kb_start())


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message) -> None:
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\nUpscaleImage - —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. \n\nStyleTransfer - –ø–µ—Ä–µ–Ω—Å—Ç–∏ —Å—Ç–∏–ª—å —Å –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–µ.' ,
                         reply_markup=get_kb_start())


@dp.message_handler(commands=['StyleTransfer', 'transfer_style'])
async def cmd_create(message: types.Message) -> None:
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!",
                        reply_markup=get_cancel_kb())
    await ProfileStatesGroup.photo_content.set()  # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ç–æ

@dp.message_handler(commands=['UpscaleImage', 'upscale_image'])
async def cmd_create(message: types.Message) -> None:
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
                        reply_markup=get_cancel_kb())
    await Imagesforupscale.photo_content.set()  # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ç–æ


@dp.message_handler(lambda message: not message.photo, state=ProfileStatesGroup.photo_content)
async def check_photo_content(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')



@dp.message_handler(content_types=['photo'], state=ProfileStatesGroup.photo_content)
async def load_photo_content(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['photo_content'] = message.photo[-1].file_id

    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ  –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è!')
    await ProfileStatesGroup.next()

@dp.message_handler(lambda message: not message.photo, state=Imagesforupscale.photo_content)
async def check_photo_content(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')



@dp.message_handler(content_types=['photo'], state=Imagesforupscale.photo_content)
async def load_photo_content(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['photo_content'] = message.photo[-1].file_id
        file_info_content = await bot.get_file(data['photo_content'])
        content_img = await bot.download_file(file_info_content.file_path)
    im = Image.open(content_img)
    s1, s2 = im.size
    await message.answer(f'–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {s1}x{s2}')
    if max(im.size)<=2200:
        await message.reply('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ 4 —Ä–∞–∑–∞! –û–∂–∏–¥–∞–π—Ç–µ...')
        output_image = upscale(im)
        s1e, s2e = output_image.size 
        await message.answer(f'–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ {s1e}x{s2e}')
        output_byte_image = pil_to_bytes(output_image)
        await bot.send_photo(chat_id=message.from_user.id, photo=output_byte_image)
        await message.answer("–ì–æ—Ç–æ–≤–æ!üëçüëç\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ, –∂–º–∏üëáüëá", reply_markup=get_cancel_kb())
        await state.finish()
    else:
        await message.reply('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! \n\n –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 2000 –ø–∏–∫—Å–µ–ª–µ–π –ø–æ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ!', reply_markup=get_cancel_kb())
        


@dp.message_handler(lambda message: not message.photo, state=ProfileStatesGroup.photo_style)
async def check_photo_style(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')

@dp.message_handler(content_types=['photo'], state=ProfileStatesGroup.photo_style)
async def load_photo_style(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['photo_style'] = message.photo[-1].file_id

        file_info_content = await bot.get_file(data['photo_content'])
        content_img = await bot.download_file(file_info_content.file_path)
        file_info_style = await bot.get_file(data['photo_style'])
        style_img = await bot.download_file(file_info_style.file_path)

        # await bot.send_photo(chat_id=message.from_user.id,
        #                      photo=data['photo_content'],
        #                      caption=f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        # await bot.send_photo(chat_id=message.from_user.id,
        #                      photo=data['photo_style'],
        #                      caption=f"–í–∞—à–µ —Ñ–æ—Ç–æ —Å—Ç–∏–ª—è")

    await message.reply('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è... (‚âà55 —Å–µ–∫.)')
    
    # print(type(content_img))
    output_image = stylize(content_img, style_img)
    output_byte_image = pil_to_bytes(output_image)
    await bot.send_photo(chat_id=message.from_user.id, photo=output_byte_image)
    await message.answer("–ì–æ—Ç–æ–≤–æ!üëçüëç\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ, –∂–º–∏üëáüëá", reply_markup=get_cancel_kb())
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True)